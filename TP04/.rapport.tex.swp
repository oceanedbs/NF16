\documentclass[11pt]{report}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{listings}


\usepackage{fancyhdr}
\usepackage{graphicx}
\usepackage{color}
\pagestyle{fancy}


%Gummi|065|=)
\title{\textbf{TP4 - Arbres}}
\author{Louis Caron\\
		Océane Dubois}
\date{}
\begin{document}

\maketitle
\newpage

\section{Partie A : Représentation 0 - ABR}

Dans cette partie le but est de représenter un dictionnaire sous forme d'ABR, ou chaque noeud comporte un mot. Le fils gauche de ce mot à pour clé un mot plus petit selon l'ordre alphabétique et le fils droit est composé d'un mot qui est plus grand que la clé du noeud père, selon l'ordre alphabétique. 

Nous avons implémenté 2 structures pour coder ces foctions : Arbre, qui pointe toujours sur la racine de l'arbre et DicoABR qui est une cellule de l'arbre. 

Ainsi la fonction initDico, permet de d'allouer de la mémoire à la structure Arbre et à la structure DicoABR et de l'initialiser avec une chaine de caractère, la structure Arbre pointe sur Dico ABR.

Cette fonction est en O(1) car ne réalise que des assignations

\medskip

La fonction ajoutMot permet d'insérer un nouveau mot dans l'ABR que nous avons créé précédement. Cette fonction devra au maximum parcourir toute la hauteur de l'arbre, on sera donc en O(h).


La fonction rechercherMot permet de rechercher dans tout l'arbre si un mot est présent. Si le mot exise elle retourne un pointeur sur le mot. Elle devra également au maximum parcourir toute la hauteur de l'arbre. Sa compléxité est donc en O(h).


La fonction supprimerMot permet de supprimer un noeud de l'arbre passé, si la valeur recherchée existe. La fonction commence par appeler la fonction rechercherMot pour savoir si la valeur recherchée existe. Si elle n'existe pas on sort de la fonction, sinon on regarde le nombre de fils que le noeud possède. S'il ne possède aucun fils, on peut le supprimer directement. Si il possède un fils droit ou un fils gauche on sauvegarde son unique fils et on le rattache au père du noeud à supprimer, puis on supprime le noeud. Si le noeud à 2 fils, on cherche le minimum du sous-arbre droit, puis on remplace le noeud par le minimum de son sous-arbre droit. 

Cette fonction fait appel à rechercherMot qui est en O(h), puis la fonction ne réalise qeue des assignations, la complexité de la fonction est donc en O(h). Sauf si il y a 2 fils car on appelle la fonction minimum. On est donc en O(2h) soit en O(h).

La fonction suggestionMots, recherche à partir d'une souschaine, le mot le plus petit contenant cette sous-chaine. Puis elle imprime ses successeurs en fonction du nombre de suggestions demandées. Si il n'y a pas de mot contennant cette sous-chaine la fonction retourne les mots qui se trouvent autour de la position que devrait occuper ce mot si il était dans l'abre. Cette fonction est aussi en O(2h) soit en O(h)


Nous avons également implémenté la fonction minimum et maximum qui permettent de retourner le minimum( ou le maximum) d'un sous-arbre, ces fonction sont utilisée dans les fonctions supprimeMots et suggestionMots. La complexité de ces fonctions est en O(h).

Les fonctions successeur et prédecesseur sont utilisées dans la fonction suggestionMots, elles retourne le successeur  ou le prédecesseur de n'importe quel noeud d'un arbre. Elle est également en O(h).

Pour imprimer un ABR nous avons implémenté 3 fonctions pour imprimer tout l'ABR : parcous\_infixe, parcours\_prefixe et parcours\_postfixe. Ces fonctions sont appellées autant de fois qu'il y a de noeuds. Elles sont donc en O(n) si il y a n noeuds dans l'ABR

Pour impriser uniquement un sous-ensemble de l'ABR, nous avons implémenté 2 fonctions : printABR3 et print ABR4 qui permettent d'imprimer respectivement tous les mots avant le mot passé en argument ou tous les mots qui sont après (dans l'ordre alphabétique) le mot passé en argument.

\section{Partie B : représentation plus compacte - Arbre lexicographique}

Dans cette partie on implémentera aussi un arbre mais non-binaire cette fois-ci. 

La fonction initDico prend en paramètre un dictionnaire déjà alloué en mémoire et un mot, et entre le mot dans le dictionnaire.
Cette fonction est appellée autant de fois qu'il y a de lettres dans le mot, si il y a m lettres dans le mot, la complexité de la fonction est en O(m).

La fonction recherMot2 permet de rechercher si un mot est présent dans le dictionnaire, si le mot est présent, la fonction retourne 1, 0 sinon. Cette fonction peut dans le pire des cas parcourir tous les noeuds de l'abre. Si l'arbre possède n noeuds, la complexité est en O(n)


La fonction prefixeMot permet de retourner un pointeur un noeud du dictionnaire qui contient la dernière lettre en commun entre le dictionnaire et le mot passé en acrgument. Dans le pire des cas, cette fonctions doit parcourir tout l'abre. Si l'abre possède n noeuds, la complexité est en O(n).

La fonction prefixeMotpointeur renvoit un pointeur sur une cellule Mot qui correspond à la dernière lettre du mot qui est déjà dans le dictionnaire. Elle fonctionne comme la fonction précédente, elle est donc en O(n).


La fonction ajoutMot2 permet d'ajouter un mot au dictionnaire, elle commence par appeler prefixeMot et prefixeMotpointeur, a partir de là elle insèrer tous les caractères du mot. Elle peut potentiellement avoir besoin de parcourir tous le dictionnaire. Ainsi si le mot possède m lettre et l'abre n noeuds, la compléxité est O(max(m,n)).

La fonction supprimeMot2 permet de supprimer un mot du dictionnaire (si il existe déjà). Cette fonction devra au maximum parcourir tout le dictionnaire et tout le mot. Ainsi si le mot à m lettres et que l'arbre à n noeuds, la complexité est en O(m*n).


La fonction suggestionMot2 permet de suggérer à l'utilisateur ayant comme prefixe le mot passé en argument. Cette fonction va appeler la fonction print qui affiche tous les mots  qu'on peut composer à partir d'un noeud de l'abre. Cette fonction sera au maximum appellée n fois si il y a n noeuds dans l'abre. Sa complexité est donc en O(n)

La fonction creerMotChaine permet de creer un chaine de structure Mot à partir d'une chaine passée en argument. Cette fonction ajoute également le '\$' à la fin du mot. La complexité de cette fonction correspond au nombre de lettres du mot. Si le mot à n lettres, la complexité est en O(n).

Les fonctions print et print2 permettent d'afficher un sous ensemble de l'AL. Elles sont toutes 2 en O(n).

\section{Partie C : Intégration et fonctionnement}
Cette partie contient toutes les fonctions permettant de faire fonctionner toutes les fonctions implémentées précédement. 

Attention, dans cette partie, dico n'est pas un ABR car sa clé[fils\_gauche] peut etre plus petite que la clé du noeud, ou inversement avec fils\_droit.


La fonction chargerABR permet d'ouvrir le fichier dictionnaire.txt et de créer un arbre ABR à partir des mots d'un fchier. Cette fonction est appellée à toutes les lignes du fichier "dictionnaire.txt". Si le fichier comporte n lignes, la compléxité de la fonction est en O(n).

La fonction ajoutMotfile permet d'ajouter des mots dans au fichier dictionnaire.txt. Cette fonction est en O(1)


La fonction remplacerMot permet de remplacer un mot du fichier file.txt par un mot du dictionnaire. Cette fonction recopie tous les mots de file.txt dans file2.txt, lorsque le mot à remplacer arrive, elle écrit le mot provenant du dictionnaire, puis elle fini d'écrire tous les mots. Cette fonction est executée autant de fois qu'il y a de lignes dans file.txt. Donc si il y a n lignes dans file.txt, la fonction est en O(n).

La fontion verimotABR permet d'ouvrir le fichier dictionnaire.txt et d'ajouter à l'ABR tous les mots du fichier, en vérifiant d'abord que le mot est dans l'abre. Cette fonction appele la fonction ajoutMot qui est en O(n) (si l'abre possède n noeuds) et elle est executée autant de fois qu'il y a de lignes dans le fichier dictionnaire.txt. Si il y a m lignes, la complexité est en m*n.

La fonction veridicoABR permet d'afficher un sous ensemble de l'ABR puis de choisir un mot et de choisir si on souhaite le corriger ou le supprimer. "Valider" permet de sortir de cette fonction.Cette fonction appelle uniquement des fonctions en O(h), elle est donc en O(h).

La fonction chargerAL permet d'ajouter à l'AL tous les mots du fichier dictionnaire.txt. Cette fonction est executée autant de fois qu'il y a de lignes dans le fichier et fait appel à la fonction ajoutMot2 qui est en O(n).Donc si il y a m lignes, la complexité de la fonction est en O(m*n).


La fonction verimotAL permet de lire tous les mots contenus dans file.txt, et de les ajouter au dictionnaires si ils ne sont pas déjà présents. La complexité de cette fonction, tout comme pour verimotABR est en O(m*n).

VeridicoAL fonctionne exactement comme veridicoABR, elle est donc elle aussi en O(h).

\section{Répartition du travail}



\end{document}

